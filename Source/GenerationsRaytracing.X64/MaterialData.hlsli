#pragma once

#include "ShaderType.h"
#include "Material.hlsli"

struct MaterialData
{
    uint ShaderType : 16;
    uint Flags : 16;
    float4 TexCoordOffsets[2];
    uint PackedData[35];
};

Material GetMaterial(MaterialData materialData)
{
   Material material = (Material) 0;
   material.Flags = materialData.Flags;
   material.TexCoordOffsets = materialData.TexCoordOffsets;
   
#if SHADER_TYPE == SHADER_TYPE_SYS_ERROR
    material.Diffuse[0] = asfloat(materialData.PackedData[0]);
    material.Diffuse[1] = asfloat(materialData.PackedData[1]);
    material.Diffuse[2] = asfloat(materialData.PackedData[2]);
    material.Diffuse[3] = asfloat(materialData.PackedData[3]);
    material.Opacity = asfloat(materialData.PackedData[4]);
#elif SHADER_TYPE == SHADER_TYPE_BLEND
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.GlossTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.OpacityTexture = materialData.PackedData[4];
    material.DiffuseTexture2 = materialData.PackedData[5];
    material.SpecularTexture2 = materialData.PackedData[6];
    material.GlossTexture2 = materialData.PackedData[7];
    material.NormalTexture2 = materialData.PackedData[8];
    material.Diffuse[0] = asfloat(materialData.PackedData[9]);
    material.Diffuse[1] = asfloat(materialData.PackedData[10]);
    material.Diffuse[2] = asfloat(materialData.PackedData[11]);
    material.Diffuse[3] = asfloat(materialData.PackedData[12]);
    material.Specular[0] = asfloat(materialData.PackedData[13]);
    material.Specular[1] = asfloat(materialData.PackedData[14]);
    material.Specular[2] = asfloat(materialData.PackedData[15]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[16]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[17]);
    material.Opacity = asfloat(materialData.PackedData[18]);
#elif SHADER_TYPE == SHADER_TYPE_COMMON
    material.DiffuseTexture = materialData.PackedData[0];
    material.OpacityTexture = materialData.PackedData[1];
    material.SpecularTexture = materialData.PackedData[2];
    material.GlossTexture = materialData.PackedData[3];
    material.NormalTexture = materialData.PackedData[4];
    material.Diffuse[0] = asfloat(materialData.PackedData[5]);
    material.Diffuse[1] = asfloat(materialData.PackedData[6]);
    material.Diffuse[2] = asfloat(materialData.PackedData[7]);
    material.Diffuse[3] = asfloat(materialData.PackedData[8]);
    material.Specular[0] = asfloat(materialData.PackedData[9]);
    material.Specular[1] = asfloat(materialData.PackedData[10]);
    material.Specular[2] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[12]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[13]);
    material.Opacity = asfloat(materialData.PackedData[14]);
#elif SHADER_TYPE == SHADER_TYPE_INDIRECT
    material.DiffuseTexture = materialData.PackedData[0];
    material.GlossTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.DisplacementTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.Opacity = asfloat(materialData.PackedData[13]);
    material.OffsetParam[0] = asfloat(materialData.PackedData[14]);
    material.OffsetParam[1] = asfloat(materialData.PackedData[15]);
    material.OffsetParam[2] = asfloat(materialData.PackedData[16]);
    material.OffsetParam[3] = asfloat(materialData.PackedData[17]);
#elif SHADER_TYPE == SHADER_TYPE_LUMINESCENCE
    material.DiffuseTexture = materialData.PackedData[0];
    material.GlossTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.DisplacementTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Emissive[0] = asfloat(materialData.PackedData[8]);
    material.Emissive[1] = asfloat(materialData.PackedData[9]);
    material.Emissive[2] = asfloat(materialData.PackedData[10]);
    material.Specular[0] = asfloat(materialData.PackedData[11]);
    material.Specular[1] = asfloat(materialData.PackedData[12]);
    material.Specular[2] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[14]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[15]);
    material.Opacity = asfloat(materialData.PackedData[16]);
    material.Ambient[0] = asfloat(materialData.PackedData[17]);
    material.Ambient[1] = asfloat(materialData.PackedData[18]);
    material.Ambient[2] = asfloat(materialData.PackedData[19]);
#elif SHADER_TYPE == SHADER_TYPE_CHAOS
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.OpacityTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.NormalTexture2 = materialData.PackedData[4];
    material.Diffuse[0] = asfloat(materialData.PackedData[5]);
    material.Diffuse[1] = asfloat(materialData.PackedData[6]);
    material.Diffuse[2] = asfloat(materialData.PackedData[7]);
    material.Diffuse[3] = asfloat(materialData.PackedData[8]);
    material.Specular[0] = asfloat(materialData.PackedData[9]);
    material.Specular[1] = asfloat(materialData.PackedData[10]);
    material.Specular[2] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[12]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[13]);
    material.Opacity = asfloat(materialData.PackedData[14]);
    material.SonicSkinFalloffParam[0] = asfloat(materialData.PackedData[15]);
    material.SonicSkinFalloffParam[1] = asfloat(materialData.PackedData[16]);
    material.SonicSkinFalloffParam[2] = asfloat(materialData.PackedData[17]);
    material.ChaosWaveParamEx = asfloat(materialData.PackedData[18]);
#elif SHADER_TYPE == SHADER_TYPE_CHR_EYE
    material.DiffuseTexture = materialData.PackedData[0];
    material.GlossTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.SonicEyeHighLightPosition[0] = asfloat(materialData.PackedData[13]);
    material.SonicEyeHighLightPosition[1] = asfloat(materialData.PackedData[14]);
    material.SonicEyeHighLightPosition[2] = asfloat(materialData.PackedData[15]);
    material.SonicEyeHighLightColor[0] = asfloat(materialData.PackedData[16]);
    material.SonicEyeHighLightColor[1] = asfloat(materialData.PackedData[17]);
    material.SonicEyeHighLightColor[2] = asfloat(materialData.PackedData[18]);
#elif SHADER_TYPE == SHADER_TYPE_CHR_EYE_FHL_PROCEDURAL
    material.Diffuse[0] = asfloat(materialData.PackedData[0]);
    material.Diffuse[1] = asfloat(materialData.PackedData[1]);
    material.Diffuse[2] = asfloat(materialData.PackedData[2]);
    material.Diffuse[3] = asfloat(materialData.PackedData[3]);
    material.Specular[0] = asfloat(materialData.PackedData[4]);
    material.Specular[1] = asfloat(materialData.PackedData[5]);
    material.Specular[2] = asfloat(materialData.PackedData[6]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[7]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[8]);
    material.Opacity = asfloat(materialData.PackedData[9]);
    material.ChrEyeFHL1[0] = asfloat(materialData.PackedData[10]);
    material.ChrEyeFHL1[1] = asfloat(materialData.PackedData[11]);
    material.ChrEyeFHL1[2] = asfloat(materialData.PackedData[12]);
    material.ChrEyeFHL1[3] = asfloat(materialData.PackedData[13]);
    material.ChrEyeFHL2[0] = asfloat(materialData.PackedData[14]);
    material.ChrEyeFHL2[1] = asfloat(materialData.PackedData[15]);
    material.ChrEyeFHL2[2] = asfloat(materialData.PackedData[16]);
    material.ChrEyeFHL2[3] = asfloat(materialData.PackedData[17]);
    material.ChrEyeFHL3[0] = asfloat(materialData.PackedData[18]);
    material.ChrEyeFHL3[1] = asfloat(materialData.PackedData[19]);
    material.ChrEyeFHL3[2] = asfloat(materialData.PackedData[20]);
    material.ChrEyeFHL3[3] = asfloat(materialData.PackedData[21]);
    material.IrisColor[0] = asfloat(materialData.PackedData[22]);
    material.IrisColor[1] = asfloat(materialData.PackedData[23]);
    material.IrisColor[2] = asfloat(materialData.PackedData[24]);
    material.PupilParam[0] = asfloat(materialData.PackedData[25]);
    material.PupilParam[1] = asfloat(materialData.PackedData[26]);
    material.PupilParam[2] = asfloat(materialData.PackedData[27]);
    material.PupilParam[3] = asfloat(materialData.PackedData[28]);
    material.HighLightColor[0] = asfloat(materialData.PackedData[29]);
    material.HighLightColor[1] = asfloat(materialData.PackedData[30]);
    material.HighLightColor[2] = asfloat(materialData.PackedData[31]);
#elif SHADER_TYPE == SHADER_TYPE_CHR_EYE_FHL
    material.DiffuseTexture = materialData.PackedData[0];
    material.LevelTexture = materialData.PackedData[1];
    material.DisplacementTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.ChrEyeFHL1[0] = asfloat(materialData.PackedData[13]);
    material.ChrEyeFHL1[1] = asfloat(materialData.PackedData[14]);
    material.ChrEyeFHL1[2] = asfloat(materialData.PackedData[15]);
    material.ChrEyeFHL1[3] = asfloat(materialData.PackedData[16]);
    material.ChrEyeFHL2[0] = asfloat(materialData.PackedData[17]);
    material.ChrEyeFHL2[1] = asfloat(materialData.PackedData[18]);
    material.ChrEyeFHL2[2] = asfloat(materialData.PackedData[19]);
    material.ChrEyeFHL2[3] = asfloat(materialData.PackedData[20]);
    material.ChrEyeFHL3[0] = asfloat(materialData.PackedData[21]);
    material.ChrEyeFHL3[1] = asfloat(materialData.PackedData[22]);
    material.ChrEyeFHL3[2] = asfloat(materialData.PackedData[23]);
    material.ChrEyeFHL3[3] = asfloat(materialData.PackedData[24]);
#elif SHADER_TYPE == SHADER_TYPE_CHR_SKIN
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.GlossTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.NormalTexture2 = materialData.PackedData[4];
    material.DisplacementTexture = materialData.PackedData[5];
    material.Diffuse[0] = asfloat(materialData.PackedData[6]);
    material.Diffuse[1] = asfloat(materialData.PackedData[7]);
    material.Diffuse[2] = asfloat(materialData.PackedData[8]);
    material.Diffuse[3] = asfloat(materialData.PackedData[9]);
    material.Specular[0] = asfloat(materialData.PackedData[10]);
    material.Specular[1] = asfloat(materialData.PackedData[11]);
    material.Specular[2] = asfloat(materialData.PackedData[12]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[14]);
    material.Opacity = asfloat(materialData.PackedData[15]);
    material.SonicSkinFalloffParam[0] = asfloat(materialData.PackedData[16]);
    material.SonicSkinFalloffParam[1] = asfloat(materialData.PackedData[17]);
    material.SonicSkinFalloffParam[2] = asfloat(materialData.PackedData[18]);
#elif SHADER_TYPE == SHADER_TYPE_CHR_SKIN_HALF
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.ReflectionTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.SonicSkinFalloffParam[0] = asfloat(materialData.PackedData[13]);
    material.SonicSkinFalloffParam[1] = asfloat(materialData.PackedData[14]);
    material.SonicSkinFalloffParam[2] = asfloat(materialData.PackedData[15]);
#elif SHADER_TYPE == SHADER_TYPE_CHR_SKIN_IGNORE
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.DisplacementTexture = materialData.PackedData[2];
    material.ReflectionTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Ambient[0] = asfloat(materialData.PackedData[8]);
    material.Ambient[1] = asfloat(materialData.PackedData[9]);
    material.Ambient[2] = asfloat(materialData.PackedData[10]);
    material.Specular[0] = asfloat(materialData.PackedData[11]);
    material.Specular[1] = asfloat(materialData.PackedData[12]);
    material.Specular[2] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[14]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[15]);
    material.Opacity = asfloat(materialData.PackedData[16]);
    material.SonicSkinFalloffParam[0] = asfloat(materialData.PackedData[17]);
    material.SonicSkinFalloffParam[1] = asfloat(materialData.PackedData[18]);
    material.SonicSkinFalloffParam[2] = asfloat(materialData.PackedData[19]);
    material.ChrEmissionParam[0] = asfloat(materialData.PackedData[20]);
    material.ChrEmissionParam[1] = asfloat(materialData.PackedData[21]);
    material.ChrEmissionParam[2] = asfloat(materialData.PackedData[22]);
    material.ChrEmissionParam[3] = asfloat(materialData.PackedData[23]);
#elif SHADER_TYPE == SHADER_TYPE_CLOAK
    material.DiffuseTexture = materialData.PackedData[0];
    material.DisplacementTexture = materialData.PackedData[1];
    material.Ambient[0] = asfloat(materialData.PackedData[2]);
    material.Ambient[1] = asfloat(materialData.PackedData[3]);
    material.Ambient[2] = asfloat(materialData.PackedData[4]);
    material.CloakParam = asfloat(materialData.PackedData[5]);
#elif SHADER_TYPE == SHADER_TYPE_CLOUD
    material.NormalTexture = materialData.PackedData[0];
    material.DisplacementTexture = materialData.PackedData[1];
    material.ReflectionTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.SonicSkinFalloffParam[0] = asfloat(materialData.PackedData[13]);
    material.SonicSkinFalloffParam[1] = asfloat(materialData.PackedData[14]);
    material.SonicSkinFalloffParam[2] = asfloat(materialData.PackedData[15]);
#elif SHADER_TYPE == SHADER_TYPE_DIM
    material.DiffuseTexture = materialData.PackedData[0];
    material.GlossTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.ReflectionTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Ambient[0] = asfloat(materialData.PackedData[8]);
    material.Ambient[1] = asfloat(materialData.PackedData[9]);
    material.Ambient[2] = asfloat(materialData.PackedData[10]);
    material.Specular[0] = asfloat(materialData.PackedData[11]);
    material.Specular[1] = asfloat(materialData.PackedData[12]);
    material.Specular[2] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[14]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[15]);
    material.Opacity = asfloat(materialData.PackedData[16]);
#elif SHADER_TYPE == SHADER_TYPE_DISTORTION
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.NormalTexture2 = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.Opacity = asfloat(materialData.PackedData[13]);
#elif SHADER_TYPE == SHADER_TYPE_DISTORTION_OVERLAY
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.NormalTexture2 = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Opacity = asfloat(materialData.PackedData[7]);
    material.DistortionParam[0] = asfloat(materialData.PackedData[8]);
    material.DistortionParam[1] = asfloat(materialData.PackedData[9]);
    material.DistortionParam[2] = asfloat(materialData.PackedData[10]);
    material.DistortionParam[3] = asfloat(materialData.PackedData[11]);
#elif SHADER_TYPE == SHADER_TYPE_ENM_EMISSION
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.SpecularTexture = materialData.PackedData[2];
    material.DisplacementTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Ambient[0] = asfloat(materialData.PackedData[8]);
    material.Ambient[1] = asfloat(materialData.PackedData[9]);
    material.Ambient[2] = asfloat(materialData.PackedData[10]);
    material.Specular[0] = asfloat(materialData.PackedData[11]);
    material.Specular[1] = asfloat(materialData.PackedData[12]);
    material.Specular[2] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[14]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[15]);
    material.Opacity = asfloat(materialData.PackedData[16]);
    material.ChrEmissionParam[0] = asfloat(materialData.PackedData[17]);
    material.ChrEmissionParam[1] = asfloat(materialData.PackedData[18]);
    material.ChrEmissionParam[2] = asfloat(materialData.PackedData[19]);
    material.ChrEmissionParam[3] = asfloat(materialData.PackedData[20]);
#elif SHADER_TYPE == SHADER_TYPE_ENM_GLASS
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.DisplacementTexture = materialData.PackedData[3];
    material.ReflectionTexture = materialData.PackedData[4];
    material.Diffuse[0] = asfloat(materialData.PackedData[5]);
    material.Diffuse[1] = asfloat(materialData.PackedData[6]);
    material.Diffuse[2] = asfloat(materialData.PackedData[7]);
    material.Diffuse[3] = asfloat(materialData.PackedData[8]);
    material.Ambient[0] = asfloat(materialData.PackedData[9]);
    material.Ambient[1] = asfloat(materialData.PackedData[10]);
    material.Ambient[2] = asfloat(materialData.PackedData[11]);
    material.Specular[0] = asfloat(materialData.PackedData[12]);
    material.Specular[1] = asfloat(materialData.PackedData[13]);
    material.Specular[2] = asfloat(materialData.PackedData[14]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[15]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[16]);
    material.Opacity = asfloat(materialData.PackedData[17]);
    material.ChrEmissionParam[0] = asfloat(materialData.PackedData[18]);
    material.ChrEmissionParam[1] = asfloat(materialData.PackedData[19]);
    material.ChrEmissionParam[2] = asfloat(materialData.PackedData[20]);
    material.ChrEmissionParam[3] = asfloat(materialData.PackedData[21]);
#elif SHADER_TYPE == SHADER_TYPE_ENM_IGNORE
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.DisplacementTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Ambient[0] = asfloat(materialData.PackedData[7]);
    material.Ambient[1] = asfloat(materialData.PackedData[8]);
    material.Ambient[2] = asfloat(materialData.PackedData[9]);
    material.Specular[0] = asfloat(materialData.PackedData[10]);
    material.Specular[1] = asfloat(materialData.PackedData[11]);
    material.Specular[2] = asfloat(materialData.PackedData[12]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[14]);
    material.Opacity = asfloat(materialData.PackedData[15]);
    material.ChrEmissionParam[0] = asfloat(materialData.PackedData[16]);
    material.ChrEmissionParam[1] = asfloat(materialData.PackedData[17]);
    material.ChrEmissionParam[2] = asfloat(materialData.PackedData[18]);
    material.ChrEmissionParam[3] = asfloat(materialData.PackedData[19]);
#elif SHADER_TYPE == SHADER_TYPE_FADE_OUT_NORMAL
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.Diffuse[0] = asfloat(materialData.PackedData[2]);
    material.Diffuse[1] = asfloat(materialData.PackedData[3]);
    material.Diffuse[2] = asfloat(materialData.PackedData[4]);
    material.Diffuse[3] = asfloat(materialData.PackedData[5]);
    material.Specular[0] = asfloat(materialData.PackedData[6]);
    material.Specular[1] = asfloat(materialData.PackedData[7]);
    material.Specular[2] = asfloat(materialData.PackedData[8]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[10]);
    material.Opacity = asfloat(materialData.PackedData[11]);
#elif SHADER_TYPE == SHADER_TYPE_FALLOFF
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.GlossTexture = materialData.PackedData[2];
    material.DisplacementTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.Opacity = asfloat(materialData.PackedData[13]);
#elif SHADER_TYPE == SHADER_TYPE_FALLOFF_V
    material.DiffuseTexture = materialData.PackedData[0];
    material.GlossTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.NormalTexture2 = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.Opacity = asfloat(materialData.PackedData[13]);
#elif SHADER_TYPE == SHADER_TYPE_FUR
    material.DiffuseTexture = materialData.PackedData[0];
    material.DiffuseTexture2 = materialData.PackedData[1];
    material.SpecularTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.NormalTexture2 = materialData.PackedData[4];
    material.DisplacementTexture = materialData.PackedData[5];
    material.Diffuse[0] = asfloat(materialData.PackedData[6]);
    material.Diffuse[1] = asfloat(materialData.PackedData[7]);
    material.Diffuse[2] = asfloat(materialData.PackedData[8]);
    material.Diffuse[3] = asfloat(materialData.PackedData[9]);
    material.Specular[0] = asfloat(materialData.PackedData[10]);
    material.Specular[1] = asfloat(materialData.PackedData[11]);
    material.Specular[2] = asfloat(materialData.PackedData[12]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[14]);
    material.Opacity = asfloat(materialData.PackedData[15]);
    material.SonicSkinFalloffParam[0] = asfloat(materialData.PackedData[16]);
    material.SonicSkinFalloffParam[1] = asfloat(materialData.PackedData[17]);
    material.SonicSkinFalloffParam[2] = asfloat(materialData.PackedData[18]);
    material.FurParam[0] = asfloat(materialData.PackedData[19]);
    material.FurParam[1] = asfloat(materialData.PackedData[20]);
    material.FurParam[2] = asfloat(materialData.PackedData[21]);
    material.FurParam[3] = asfloat(materialData.PackedData[22]);
    material.FurParam2[0] = asfloat(materialData.PackedData[23]);
    material.FurParam2[1] = asfloat(materialData.PackedData[24]);
    material.FurParam2[2] = asfloat(materialData.PackedData[25]);
    material.FurParam2[3] = asfloat(materialData.PackedData[26]);
#elif SHADER_TYPE == SHADER_TYPE_GLASS
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.GlossTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.Opacity = asfloat(materialData.PackedData[13]);
    material.FresnelParam[0] = asfloat(materialData.PackedData[14]);
    material.FresnelParam[1] = asfloat(materialData.PackedData[15]);
#elif SHADER_TYPE == SHADER_TYPE_GLASS_REFRACTION
    material.DiffuseTexture = materialData.PackedData[0];
    material.Diffuse[0] = asfloat(materialData.PackedData[1]);
    material.Diffuse[1] = asfloat(materialData.PackedData[2]);
    material.Diffuse[2] = asfloat(materialData.PackedData[3]);
    material.Diffuse[3] = asfloat(materialData.PackedData[4]);
    material.Specular[0] = asfloat(materialData.PackedData[5]);
    material.Specular[1] = asfloat(materialData.PackedData[6]);
    material.Specular[2] = asfloat(materialData.PackedData[7]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[8]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[9]);
    material.Opacity = asfloat(materialData.PackedData[10]);
    material.LuminanceRange = asfloat(materialData.PackedData[11]);
    material.FresnelParam[0] = asfloat(materialData.PackedData[12]);
    material.FresnelParam[1] = asfloat(materialData.PackedData[13]);
    material.GlassRefractionParam = asfloat(materialData.PackedData[14]);
#elif SHADER_TYPE == SHADER_TYPE_ICE
    material.DiffuseTexture = materialData.PackedData[0];
    material.GlossTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
#elif SHADER_TYPE == SHADER_TYPE_IGNORE_LIGHT
    material.DiffuseTexture = materialData.PackedData[0];
    material.OpacityTexture = materialData.PackedData[1];
    material.DisplacementTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Ambient[0] = asfloat(materialData.PackedData[7]);
    material.Ambient[1] = asfloat(materialData.PackedData[8]);
    material.Ambient[2] = asfloat(materialData.PackedData[9]);
    material.Opacity = asfloat(materialData.PackedData[10]);
    material.EmissionParam[0] = asfloat(materialData.PackedData[11]);
    material.EmissionParam[1] = asfloat(materialData.PackedData[12]);
    material.EmissionParam[2] = asfloat(materialData.PackedData[13]);
    material.EmissionParam[3] = asfloat(materialData.PackedData[14]);
#elif SHADER_TYPE == SHADER_TYPE_IGNORE_LIGHT_TWICE
    material.DiffuseTexture = materialData.PackedData[0];
    material.Diffuse[0] = asfloat(materialData.PackedData[1]);
    material.Diffuse[1] = asfloat(materialData.PackedData[2]);
    material.Diffuse[2] = asfloat(materialData.PackedData[3]);
    material.Diffuse[3] = asfloat(materialData.PackedData[4]);
    material.Opacity = asfloat(materialData.PackedData[5]);
#elif SHADER_TYPE == SHADER_TYPE_INDIRECT_NO_LIGHT
    material.DiffuseTexture = materialData.PackedData[0];
    material.DisplacementTexture = materialData.PackedData[1];
    material.DisplacementTexture2 = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Opacity = asfloat(materialData.PackedData[7]);
    material.OffsetParam[0] = asfloat(materialData.PackedData[8]);
    material.OffsetParam[1] = asfloat(materialData.PackedData[9]);
    material.OffsetParam[2] = asfloat(materialData.PackedData[10]);
    material.OffsetParam[3] = asfloat(materialData.PackedData[11]);
#elif SHADER_TYPE == SHADER_TYPE_INDIRECT_V
    material.DiffuseTexture = materialData.PackedData[0];
    material.OpacityTexture = materialData.PackedData[1];
    material.GlossTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.DisplacementTexture = materialData.PackedData[4];
    material.Diffuse[0] = asfloat(materialData.PackedData[5]);
    material.Diffuse[1] = asfloat(materialData.PackedData[6]);
    material.Diffuse[2] = asfloat(materialData.PackedData[7]);
    material.Diffuse[3] = asfloat(materialData.PackedData[8]);
    material.Specular[0] = asfloat(materialData.PackedData[9]);
    material.Specular[1] = asfloat(materialData.PackedData[10]);
    material.Specular[2] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[12]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[13]);
    material.Opacity = asfloat(materialData.PackedData[14]);
    material.OffsetParam[0] = asfloat(materialData.PackedData[15]);
    material.OffsetParam[1] = asfloat(materialData.PackedData[16]);
    material.OffsetParam[2] = asfloat(materialData.PackedData[17]);
    material.OffsetParam[3] = asfloat(materialData.PackedData[18]);
#elif SHADER_TYPE == SHADER_TYPE_LAVA
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.DisplacementTexture = materialData.PackedData[2];
    material.DisplacementTexture2 = materialData.PackedData[3];
    material.DisplacementTexture3 = materialData.PackedData[4];
    material.Diffuse[0] = asfloat(materialData.PackedData[5]);
    material.Diffuse[1] = asfloat(materialData.PackedData[6]);
    material.Diffuse[2] = asfloat(materialData.PackedData[7]);
    material.Diffuse[3] = asfloat(materialData.PackedData[8]);
    material.Specular[0] = asfloat(materialData.PackedData[9]);
    material.Specular[1] = asfloat(materialData.PackedData[10]);
    material.Specular[2] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[12]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[13]);
    material.Opacity = asfloat(materialData.PackedData[14]);
    material.OffsetParam[0] = asfloat(materialData.PackedData[15]);
    material.OffsetParam[1] = asfloat(materialData.PackedData[16]);
    material.OffsetParam[2] = asfloat(materialData.PackedData[17]);
    material.OffsetParam[3] = asfloat(materialData.PackedData[18]);
    material.HeightParam[0] = asfloat(materialData.PackedData[19]);
    material.HeightParam[1] = asfloat(materialData.PackedData[20]);
#elif SHADER_TYPE == SHADER_TYPE_LUMINESCENCE_V
    material.DiffuseTexture = materialData.PackedData[0];
    material.GlossTexture = materialData.PackedData[1];
    material.NormalTexture = materialData.PackedData[2];
    material.DisplacementTexture = materialData.PackedData[3];
    material.DiffuseTexture2 = materialData.PackedData[4];
    material.GlossTexture2 = materialData.PackedData[5];
    material.Diffuse[0] = asfloat(materialData.PackedData[6]);
    material.Diffuse[1] = asfloat(materialData.PackedData[7]);
    material.Diffuse[2] = asfloat(materialData.PackedData[8]);
    material.Diffuse[3] = asfloat(materialData.PackedData[9]);
    material.Ambient[0] = asfloat(materialData.PackedData[10]);
    material.Ambient[1] = asfloat(materialData.PackedData[11]);
    material.Ambient[2] = asfloat(materialData.PackedData[12]);
    material.Specular[0] = asfloat(materialData.PackedData[13]);
    material.Specular[1] = asfloat(materialData.PackedData[14]);
    material.Specular[2] = asfloat(materialData.PackedData[15]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[16]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[17]);
    material.Opacity = asfloat(materialData.PackedData[18]);
#elif SHADER_TYPE == SHADER_TYPE_METAL
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.GlossTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.Opacity = asfloat(materialData.PackedData[13]);
#elif SHADER_TYPE == SHADER_TYPE_MIRROR
    material.DiffuseTexture = materialData.PackedData[0];
    material.Diffuse[0] = asfloat(materialData.PackedData[1]);
    material.Diffuse[1] = asfloat(materialData.PackedData[2]);
    material.Diffuse[2] = asfloat(materialData.PackedData[3]);
    material.Diffuse[3] = asfloat(materialData.PackedData[4]);
    material.Opacity = asfloat(materialData.PackedData[5]);
    material.FresnelParam[0] = asfloat(materialData.PackedData[6]);
    material.FresnelParam[1] = asfloat(materialData.PackedData[7]);
#elif SHADER_TYPE == SHADER_TYPE_RING
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.ReflectionTexture = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.LuminanceRange = asfloat(materialData.PackedData[13]);
#elif SHADER_TYPE == SHADER_TYPE_SHOE
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.GlossTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.Diffuse[0] = asfloat(materialData.PackedData[4]);
    material.Diffuse[1] = asfloat(materialData.PackedData[5]);
    material.Diffuse[2] = asfloat(materialData.PackedData[6]);
    material.Diffuse[3] = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.Opacity = asfloat(materialData.PackedData[13]);
#elif SHADER_TYPE == SHADER_TYPE_TIME_EATER
    material.DiffuseTexture = materialData.PackedData[0];
    material.SpecularTexture = materialData.PackedData[1];
    material.OpacityTexture = materialData.PackedData[2];
    material.NormalTexture = materialData.PackedData[3];
    material.NormalTexture2 = materialData.PackedData[4];
    material.Diffuse[0] = asfloat(materialData.PackedData[5]);
    material.Diffuse[1] = asfloat(materialData.PackedData[6]);
    material.Diffuse[2] = asfloat(materialData.PackedData[7]);
    material.Diffuse[3] = asfloat(materialData.PackedData[8]);
    material.Specular[0] = asfloat(materialData.PackedData[9]);
    material.Specular[1] = asfloat(materialData.PackedData[10]);
    material.Specular[2] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[13]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[14]);
    material.LuminanceRange = asfloat(materialData.PackedData[15]);
    material.SonicSkinFalloffParam[0] = asfloat(materialData.PackedData[16]);
    material.SonicSkinFalloffParam[1] = asfloat(materialData.PackedData[17]);
    material.SonicSkinFalloffParam[2] = asfloat(materialData.PackedData[18]);
    material.ChaosWaveParamEx = asfloat(materialData.PackedData[19]);
#elif SHADER_TYPE == SHADER_TYPE_WATER_ADD
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.NormalTexture2 = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.WaterParam[0] = asfloat(materialData.PackedData[13]);
    material.WaterParam[1] = asfloat(materialData.PackedData[14]);
    material.WaterParam[2] = asfloat(materialData.PackedData[15]);
    material.WaterParam[3] = asfloat(materialData.PackedData[16]);
#elif SHADER_TYPE == SHADER_TYPE_WATER_MUL
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.NormalTexture2 = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Specular[0] = asfloat(materialData.PackedData[7]);
    material.Specular[1] = asfloat(materialData.PackedData[8]);
    material.Specular[2] = asfloat(materialData.PackedData[9]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[11]);
    material.Opacity = asfloat(materialData.PackedData[12]);
    material.WaterParam[0] = asfloat(materialData.PackedData[13]);
    material.WaterParam[1] = asfloat(materialData.PackedData[14]);
    material.WaterParam[2] = asfloat(materialData.PackedData[15]);
    material.WaterParam[3] = asfloat(materialData.PackedData[16]);
#elif SHADER_TYPE == SHADER_TYPE_WATER_OPACITY
    material.DiffuseTexture = materialData.PackedData[0];
    material.NormalTexture = materialData.PackedData[1];
    material.NormalTexture2 = materialData.PackedData[2];
    material.Diffuse[0] = asfloat(materialData.PackedData[3]);
    material.Diffuse[1] = asfloat(materialData.PackedData[4]);
    material.Diffuse[2] = asfloat(materialData.PackedData[5]);
    material.Diffuse[3] = asfloat(materialData.PackedData[6]);
    material.Opacity = asfloat(materialData.PackedData[7]);
    material.Specular[0] = asfloat(materialData.PackedData[8]);
    material.Specular[1] = asfloat(materialData.PackedData[9]);
    material.Specular[2] = asfloat(materialData.PackedData[10]);
    material.GlossLevel[0] = asfloat(materialData.PackedData[11]);
    material.GlossLevel[1] = asfloat(materialData.PackedData[12]);
    material.WaterParam[0] = asfloat(materialData.PackedData[13]);
    material.WaterParam[1] = asfloat(materialData.PackedData[14]);
    material.WaterParam[2] = asfloat(materialData.PackedData[15]);
    material.WaterParam[3] = asfloat(materialData.PackedData[16]);
#endif
   return material;
}
